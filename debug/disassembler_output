{0: ['BRK', 'IMP', '1', '7', 'czidbvn'], 1: ['ORA', 'INDX', '2', '6', 'cZidbvN'], 5: ['ORA', 'ZP', '2', '3', 'cZidbvN'], 6: ['ASL', 'ZP', '2', '5', 'CZidbvN'], 8: ['PHP', 'IMP', '1', '3', 'czidbvn'], 9: ['ORA', 'IMM', '2', '2', 'cZidbvN'], 10: ['ASL', 'ACC', '1', '2', 'CZidbvN'], 13: ['ORA', 'ABS', '3', '4', 'cZidbvN'], 14: ['ASL', 'ABS', '3', '6', 'CZidbvN'], 16: ['BPL', 'REL', '2', '2/3', 'czidbvn'], 17: ['ORA', 'INDY', '2', '5', 'cZidbvN'], 21: ['ORA', 'ZPX', '2', '4', 'cZidbvN'], 22: ['ASL', 'ZPX', '2', '6', 'CZidbvN'], 24: ['CLC', 'IMP', '1', '2', 'Czidbvn'], 25: ['ORA', 'ABSY', '3', '4', 'cZidbvN'], 29: ['ORA', 'ABSX', '3', '4', 'cZidbvN'], 30: ['ASL', 'ABSX', '3', '7', 'CZidbvN'], 32: ['JSR', 'ABS', '3', '6', 'czidbvn'], 33: ['AND', 'INDX', '2', '6', 'cZidbvN'], 36: ['BIT', 'ZP', '2', '3', 'cZidbVN'], 37: ['AND', 'ZP', '2', '3', 'cZidbvN'], 38: ['ROL', 'ZP', '2', '5', 'CZidbvN'], 40: ['PLP', 'IMP', '1', '4', 'CZIDBVN'], 41: ['AND', 'IMM', '2', '2', 'cZidbvN'], 42: ['ROL', 'ACC', '1', '2', 'CZidbvN'], 44: ['BIT', 'ABS', '3', '4', 'cZidbVN'], 45: ['AND', 'ABS', '3', '4', 'cZidbvN'], 46: ['ROL', 'ABS', '3', '6', 'CZidbvN'], 48: ['BMI', 'REL', '2', '2/3', 'czidbvn'], 49: ['AND', 'INDY', '2', '5', 'cZidbvN'], 53: ['AND', 'ZPX', '2', '4', 'cZidbvN'], 54: ['ROL', 'ZPX', '2', '6', 'CZidbvN'], 56: ['SEC', 'IMP', '1', '2', 'Czidbvn'], 57: ['AND', 'ABSY', '3', '4', 'cZidbvN'], 61: ['AND', 'ABSX', '3', '4', 'cZidbvN'], 62: ['ROL', 'ABSX', '3', '7', 'CZidbvN'], 64: ['RTI', 'IMP', '1', '6', 'czidbvn'], 65: ['EOR', 'INDX', '2', '6', 'cZidbvN'], 69: ['EOR', 'ZP', '2', '3', 'cZidbvN'], 70: ['LSR', 'ZP', '2', '5', 'CZidbvN'], 72: ['PHA', 'IMP', '1', '3', 'czidbvn'], 73: ['EOR', 'IMM', '2', '2', 'cZidbvN'], 74: ['LSR', 'ACC', '1', '2', 'CZidbvN'], 76: ['JMP', 'ABS', '3', '3', 'czidbvn'], 77: ['EOR', 'ABS', '3', '4', 'cZidbvN'], 78: ['LSR', 'ABS', '3', '6', 'CZidbvN'], 80: ['BVC', 'REL', '2', '2/3', 'czidbvn'], 81: ['EOR', 'INDY', '2', '5', 'cZidbvN'], 85: ['EOR', 'ZPX', '2', '4', 'cZidbvN'], 86: ['LSR', 'ZPX', '2', '6', 'CZidbvN'], 88: ['CLI', 'IMP', '1', '2', 'czIdbvn'], 89: ['EOR', 'ABSY', '3', '4', 'cZidbvN'], 93: ['EOR', 'ABSX', '3', '4', 'cZidbvN'], 94: ['LSR', 'ABSX', '3', '7', 'CZidbvN'], 96: ['RTS', 'IMP', '1', '6', 'czidbvn'], 97: ['ADC', 'INDX', '2', '6', 'CZidbVN'], 101: ['ADC', 'ZP', '2', '3', 'CZidbVN'], 102: ['ROR', 'ZP', '2', '5', 'CZidbvN'], 104: ['PLA', 'IMP', '1', '4', 'cZidbvN'], 105: ['ADC', 'IMM', '2', '2', 'CZidbVN'], 106: ['ROR', 'ACC', '1', '2', 'CZidbvN'], 108: ['JMP', 'IND', '3', '5', 'czidbvn'], 109: ['ADC', 'ABS', '3', '4', 'CZidbVN'], 110: ['ROR', 'ABSX', '3', '7', 'CZidbvN'], 112: ['BVS', 'REL', '2', '2/3', 'czidbvn'], 113: ['ADC', 'INDY', '2', '5', 'CZidbVN'], 117: ['ADC', 'ZPX', '2', '4', 'CZidbVN'], 118: ['ROR', 'ZPX', '2', '6', 'CZidbvN'], 120: ['SEI', 'IMP', '1', '2', 'czIdbvn'], 121: ['ADC', 'ABSY', '3', '4', 'CZidbVN'], 125: ['ADC', 'ABSX', '3', '4', 'CZidbVN'], 126: ['ROR', 'ABS', '3', '6', 'CZidbvN'], 129: ['STA', 'INDX', '2', '6', 'czidbvn'], 132: ['STY', 'ZP', '2', '3', 'czidbvn'], 133: ['STA', 'ZP', '2', '3', 'czidbvn'], 134: ['STX', 'ZP', '2', '3', 'czidbvn'], 136: ['DEY', 'IMP', '1', '2', 'cZidbvN'], 138: ['TXA', 'IMP', '1', '2', 'cZidbvN'], 140: ['STY', 'ABS', '3', '4', 'czidbvn'], 141: ['STA', 'ABS', '3', '4', 'czidbvn'], 142: ['STX', 'ABS', '3', '4', 'czidbvn'], 144: ['BCC', 'REL', '2', '2/3', 'czidbvn'], 145: ['STA', 'INDY', '2', '6', 'czidbvn'], 148: ['STY', 'ZPX', '2', '4', 'czidbvn'], 149: ['STA', 'ZPX', '2', '4', 'czidbvn'], 150: ['STX', 'ZPY', '2', '4', 'czidbvn'], 152: ['TYA', 'IMP', '1', '2', 'cZidbvN'], 153: ['STA', 'ABSY', '3', '5', 'czidbvn'], 154: ['TXS', 'IMP', '1', '2', 'czidbvn'], 157: ['STA', 'ABSX', '3', '5', 'czidbvn'], 160: ['LDY', 'IMM', '2', '2', 'cZidbvN'], 161: ['LDA', 'INDX', '2', '6', 'cZidbvN'], 162: ['LDX', 'IMM', '2', '2', 'cZidbvN'], 164: ['LDY', 'ZP', '2', '3', 'cZidbvN'], 165: ['LDA', 'ZP', '2', '3', 'cZidbvN'], 166: ['LDX', 'ZP', '2', '3', 'cZidbvN'], 168: ['TAY', 'IMP', '1', '2', 'cZidbvN'], 169: ['LDA', 'IMM', '2', '2', 'cZidbvN'], 170: ['TAX', 'IMP', '1', '2', 'cZidbvN'], 172: ['LDY', 'ABS', '3', '4', 'cZidbvN'], 173: ['LDA', 'ABS', '3', '4', 'cZidbvN'], 174: ['LDX', 'ABS', '3', '4', 'cZidbvN'], 176: ['BCS', 'REL', '2', '2/3', 'czidbvn'], 177: ['LDA', 'INDY', '2', '5', 'cZidbvN'], 180: ['LDY', 'ZPX', '2', '4', 'cZidbvN'], 181: ['LDA', 'ZPX', '2', '4', 'cZidbvN'], 182: ['LDX', 'ZPY', '2', '4', 'cZidbvN'], 184: ['CLV', 'IMP', '1', '2', 'czidbVn'], 185: ['LDA', 'ABSY', '3', '4', 'cZidbvN'], 186: ['TSX', 'IMP', '1', '2', 'cZidbvN'], 188: ['LDY', 'ABSX', '3', '4', 'cZidbvN'], 189: ['LDA', 'ABSX', '3', '4', 'cZidbvN'], 190: ['LDX', 'ABSY', '3', '4', 'cZidbvN'], 192: ['CPY', 'IMM', '2', '2', 'CZidbvN'], 193: ['CMP', 'INDX', '2', '6', 'CZidbvN'], 196: ['CPY', 'ZP', '2', '3', 'CZidbvN'], 197: ['CMP', 'ZP', '2', '3', 'CZidbvN'], 198: ['DEC', 'ZP', '2', '5', 'cZidbvN'], 200: ['INY', 'IMP', '1', '2', 'cZidbvN'], 201: ['CMP', 'IMM', '2', '2', 'CZidbvN'], 202: ['DEX', 'IMP', '1', '2', 'cZidbvN'], 204: ['CPY', 'ABS', '3', '4', 'CZidbvN'], 205: ['CMP', 'ABS', '3', '4', 'CZidbvN'], 206: ['DEC', 'ABS', '3', '6', 'cZidbvN'], 208: ['BNE', 'REL', '2', '2/3', 'czidbvn'], 209: ['CMP', 'INDY', '2', '5', 'CZidbvN'], 213: ['CMP', 'ZPX', '2', '4', 'CZidbvN'], 214: ['DEC', 'ZPX', '2', '6', 'cZidbvN'], 216: ['CLD', 'IMP', '1', '2', 'cziDbvn'], 217: ['CMP', 'ABSY', '3', '4', 'CZidbvN'], 221: ['CMP', 'ABSX', '3', '4', 'CZidbvN'], 222: ['DEC', 'ABSX', '3', '7', 'cZidbvN'], 224: ['CPX', 'IMM', '2', '2', 'CZidbvN'], 225: ['SBC', 'INDX', '2', '6', 'CZidbVN'], 228: ['CPX', 'ZP', '2', '3', 'CZidbvN'], 229: ['SBC', 'ZP', '2', '3', 'CZidbVN'], 230: ['INC', 'ZP', '2', '5', 'cZidbvN'], 232: ['INX', 'IMP', '1', '2', 'cZidbvN'], 233: ['SBC', 'IMM', '2', '2', 'CZidbVN'], 234: ['NOP', 'IMP', '1', '2', 'czidbvn'], 236: ['CPX', 'ABS', '3', '4', 'CZidbvN'], 237: ['SBC', 'ABS', '3', '4', 'CZidbVN'], 238: ['INC', 'ABS', '3', '6', 'cZidbvN'], 240: ['BEQ', 'REL', '2', '2/3', 'czidbvn'], 241: ['SBC', 'INDY', '2', '5', 'CZidbVN'], 245: ['SBC', 'ZPX', '2', '4', 'CZidbVN'], 246: ['INC', 'ZPX', '2', '6', 'cZidbvN'], 248: ['SED', 'IMP', '1', '2', 'cziDbvn'], 249: ['SBC', 'ABSY', '3', '4', 'CZidbVN'], 253: ['SBC', 'ABSX', '3', '4', 'CZidbVN'], 254: ['INC', 'ABSX', '3', '7', 'cZidbvN']}
case 0x00: sprintf(opstr, "BRK"); break;
case 0x01: sprintf(opstr, "ORA ($%02x,X)", opcodes[1]); count = 2; break;
case 0x05: sprintf(opstr, "ORA $%02x", opcodes[1]); count = 2; break;
case 0x06: sprintf(opstr, "ASL $%02x", opcodes[1]); count = 2; break;
case 0x08: sprintf(opstr, "PHP"); break;
case 0x09: sprintf(opstr, "ORA #$%02x", opcodes[1]); count = 2; break;
case 0x0a: sprintf(opstr, "ASL A"); break;
case 0x0d: sprintf(opstr, "ORA $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x0e: sprintf(opstr, "ASL $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x10: sprintf(opstr, "BPL $%02x", opcodes[1]); count = 2; break;
case 0x11: sprintf(opstr, "ORA ($%02x),Y", opcodes[1]); count = 2; break;
case 0x15: sprintf(opstr, "ORA $%02x,X", opcodes[1]); count = 2; break;
case 0x16: sprintf(opstr, "ASL $%02x,X", opcodes[1]); count = 2; break;
case 0x18: sprintf(opstr, "CLC"); break;
case 0x19: sprintf(opstr, "ORA $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0x1d: sprintf(opstr, "ORA $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x1e: sprintf(opstr, "ASL $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x20: sprintf(opstr, "JSR $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x21: sprintf(opstr, "AND ($%02x,X)", opcodes[1]); count = 2; break;
case 0x24: sprintf(opstr, "BIT $%02x", opcodes[1]); count = 2; break;
case 0x25: sprintf(opstr, "AND $%02x", opcodes[1]); count = 2; break;
case 0x26: sprintf(opstr, "ROL $%02x", opcodes[1]); count = 2; break;
case 0x28: sprintf(opstr, "PLP"); break;
case 0x29: sprintf(opstr, "AND #$%02x", opcodes[1]); count = 2; break;
case 0x2a: sprintf(opstr, "ROL A"); break;
case 0x2c: sprintf(opstr, "BIT $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x2d: sprintf(opstr, "AND $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x2e: sprintf(opstr, "ROL $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x30: sprintf(opstr, "BMI $%02x", opcodes[1]); count = 2; break;
case 0x31: sprintf(opstr, "AND ($%02x),Y", opcodes[1]); count = 2; break;
case 0x35: sprintf(opstr, "AND $%02x,X", opcodes[1]); count = 2; break;
case 0x36: sprintf(opstr, "ROL $%02x,X", opcodes[1]); count = 2; break;
case 0x38: sprintf(opstr, "SEC"); break;
case 0x39: sprintf(opstr, "AND $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0x3d: sprintf(opstr, "AND $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x3e: sprintf(opstr, "ROL $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x40: sprintf(opstr, "RTI"); break;
case 0x41: sprintf(opstr, "EOR ($%02x,X)", opcodes[1]); count = 2; break;
case 0x45: sprintf(opstr, "EOR $%02x", opcodes[1]); count = 2; break;
case 0x46: sprintf(opstr, "LSR $%02x", opcodes[1]); count = 2; break;
case 0x48: sprintf(opstr, "PHA"); break;
case 0x49: sprintf(opstr, "EOR #$%02x", opcodes[1]); count = 2; break;
case 0x4a: sprintf(opstr, "LSR A"); break;
case 0x4c: sprintf(opstr, "JMP $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x4d: sprintf(opstr, "EOR $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x4e: sprintf(opstr, "LSR $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x50: sprintf(opstr, "BVC $%02x", opcodes[1]); count = 2; break;
case 0x51: sprintf(opstr, "EOR ($%02x),Y", opcodes[1]); count = 2; break;
case 0x55: sprintf(opstr, "EOR $%02x,X", opcodes[1]); count = 2; break;
case 0x56: sprintf(opstr, "LSR $%02x,X", opcodes[1]); count = 2; break;
case 0x58: sprintf(opstr, "CLI"); break;
case 0x59: sprintf(opstr, "EOR $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0x5d: sprintf(opstr, "EOR $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x5e: sprintf(opstr, "LSR $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x60: sprintf(opstr, "RTS"); break;
case 0x61: sprintf(opstr, "ADC ($%02x,X)", opcodes[1]); count = 2; break;
case 0x65: sprintf(opstr, "ADC $%02x", opcodes[1]); count = 2; break;
case 0x66: sprintf(opstr, "ROR $%02x", opcodes[1]); count = 2; break;
case 0x68: sprintf(opstr, "PLA"); break;
case 0x69: sprintf(opstr, "ADC #$%02x", opcodes[1]); count = 2; break;
case 0x6a: sprintf(opstr, "ROR A"); break;
case 0x6c: sprintf(opstr, "JMP ($%02x%02x)", opcodes[2], opcodes[1]); count = 3; break;
case 0x6d: sprintf(opstr, "ADC $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x6e: sprintf(opstr, "ROR $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x70: sprintf(opstr, "BVS $%02x", opcodes[1]); count = 2; break;
case 0x71: sprintf(opstr, "ADC ($%02x),Y", opcodes[1]); count = 2; break;
case 0x75: sprintf(opstr, "ADC $%02x,X", opcodes[1]); count = 2; break;
case 0x76: sprintf(opstr, "ROR $%02x,X", opcodes[1]); count = 2; break;
case 0x78: sprintf(opstr, "SEI"); break;
case 0x79: sprintf(opstr, "ADC $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0x7d: sprintf(opstr, "ADC $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0x7e: sprintf(opstr, "ROR $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x81: sprintf(opstr, "STA ($%02x,X)", opcodes[1]); count = 2; break;
case 0x84: sprintf(opstr, "STY $%02x", opcodes[1]); count = 2; break;
case 0x85: sprintf(opstr, "STA $%02x", opcodes[1]); count = 2; break;
case 0x86: sprintf(opstr, "STX $%02x", opcodes[1]); count = 2; break;
case 0x88: sprintf(opstr, "DEY"); break;
case 0x8a: sprintf(opstr, "TXA"); break;
case 0x8c: sprintf(opstr, "STY $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x8d: sprintf(opstr, "STA $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x8e: sprintf(opstr, "STX $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0x90: sprintf(opstr, "BCC $%02x", opcodes[1]); count = 2; break;
case 0x91: sprintf(opstr, "STA ($%02x),Y", opcodes[1]); count = 2; break;
case 0x94: sprintf(opstr, "STY $%02x,X", opcodes[1]); count = 2; break;
case 0x95: sprintf(opstr, "STA $%02x,X", opcodes[1]); count = 2; break;
case 0x96: sprintf(opstr, "STX $%02x,Y", opcodes[1]); count = 2; break;
case 0x98: sprintf(opstr, "TYA"); break;
case 0x99: sprintf(opstr, "STA $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0x9a: sprintf(opstr, "TXS"); break;
case 0x9d: sprintf(opstr, "STA $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0xa0: sprintf(opstr, "LDY #$%02x", opcodes[1]); count = 2; break;
case 0xa1: sprintf(opstr, "LDA ($%02x,X)", opcodes[1]); count = 2; break;
case 0xa2: sprintf(opstr, "LDX #$%02x", opcodes[1]); count = 2; break;
case 0xa4: sprintf(opstr, "LDY $%02x", opcodes[1]); count = 2; break;
case 0xa5: sprintf(opstr, "LDA $%02x", opcodes[1]); count = 2; break;
case 0xa6: sprintf(opstr, "LDX $%02x", opcodes[1]); count = 2; break;
case 0xa8: sprintf(opstr, "TAY"); break;
case 0xa9: sprintf(opstr, "LDA #$%02x", opcodes[1]); count = 2; break;
case 0xaa: sprintf(opstr, "TAX"); break;
case 0xac: sprintf(opstr, "LDY $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xad: sprintf(opstr, "LDA $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xae: sprintf(opstr, "LDX $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xb0: sprintf(opstr, "BCS $%02x", opcodes[1]); count = 2; break;
case 0xb1: sprintf(opstr, "LDA ($%02x),Y", opcodes[1]); count = 2; break;
case 0xb4: sprintf(opstr, "LDY $%02x,X", opcodes[1]); count = 2; break;
case 0xb5: sprintf(opstr, "LDA $%02x,X", opcodes[1]); count = 2; break;
case 0xb6: sprintf(opstr, "LDX $%02x,Y", opcodes[1]); count = 2; break;
case 0xb8: sprintf(opstr, "CLV"); break;
case 0xb9: sprintf(opstr, "LDA $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0xba: sprintf(opstr, "TSX"); break;
case 0xbc: sprintf(opstr, "LDY $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0xbd: sprintf(opstr, "LDA $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0xbe: sprintf(opstr, "LDX $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0xc0: sprintf(opstr, "CPY #$%02x", opcodes[1]); count = 2; break;
case 0xc1: sprintf(opstr, "CMP ($%02x,X)", opcodes[1]); count = 2; break;
case 0xc4: sprintf(opstr, "CPY $%02x", opcodes[1]); count = 2; break;
case 0xc5: sprintf(opstr, "CMP $%02x", opcodes[1]); count = 2; break;
case 0xc6: sprintf(opstr, "DEC $%02x", opcodes[1]); count = 2; break;
case 0xc8: sprintf(opstr, "INY"); break;
case 0xc9: sprintf(opstr, "CMP #$%02x", opcodes[1]); count = 2; break;
case 0xca: sprintf(opstr, "DEX"); break;
case 0xcc: sprintf(opstr, "CPY $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xcd: sprintf(opstr, "CMP $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xce: sprintf(opstr, "DEC $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xd0: sprintf(opstr, "BNE $%02x", opcodes[1]); count = 2; break;
case 0xd1: sprintf(opstr, "CMP ($%02x),Y", opcodes[1]); count = 2; break;
case 0xd5: sprintf(opstr, "CMP $%02x,X", opcodes[1]); count = 2; break;
case 0xd6: sprintf(opstr, "DEC $%02x,X", opcodes[1]); count = 2; break;
case 0xd8: sprintf(opstr, "CLD"); break;
case 0xd9: sprintf(opstr, "CMP $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0xdd: sprintf(opstr, "CMP $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0xde: sprintf(opstr, "DEC $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0xe0: sprintf(opstr, "CPX #$%02x", opcodes[1]); count = 2; break;
case 0xe1: sprintf(opstr, "SBC ($%02x,X)", opcodes[1]); count = 2; break;
case 0xe4: sprintf(opstr, "CPX $%02x", opcodes[1]); count = 2; break;
case 0xe5: sprintf(opstr, "SBC $%02x", opcodes[1]); count = 2; break;
case 0xe6: sprintf(opstr, "INC $%02x", opcodes[1]); count = 2; break;
case 0xe8: sprintf(opstr, "INX"); break;
case 0xe9: sprintf(opstr, "SBC #$%02x", opcodes[1]); count = 2; break;
case 0xea: sprintf(opstr, "NOP"); break;
case 0xec: sprintf(opstr, "CPX $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xed: sprintf(opstr, "SBC $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xee: sprintf(opstr, "INC $%02x%02x", opcodes[2], opcodes[1]); count = 3; break;
case 0xf0: sprintf(opstr, "BEQ $%02x", opcodes[1]); count = 2; break;
case 0xf1: sprintf(opstr, "SBC ($%02x),Y", opcodes[1]); count = 2; break;
case 0xf5: sprintf(opstr, "SBC $%02x,X", opcodes[1]); count = 2; break;
case 0xf6: sprintf(opstr, "INC $%02x,X", opcodes[1]); count = 2; break;
case 0xf8: sprintf(opstr, "SED"); break;
case 0xf9: sprintf(opstr, "SBC $%02x%02x,Y", opcodes[2], opcodes[1]); count = 3; break;
case 0xfd: sprintf(opstr, "SBC $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
case 0xfe: sprintf(opstr, "INC $%02x%02x,X", opcodes[2], opcodes[1]); count = 3; break;
